<?php

namespace Proxies\__CG__\Locastic\CoreBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \Locastic\CoreBundle\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'user_id', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'username', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'password', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'passRepeat', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'name', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'lastname', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'registered', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'lastLogin', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'isActive', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'verificationHash', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'verified', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'roles', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'toDoList');
        }

        return array('__isInitialized__', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'user_id', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'username', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'password', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'passRepeat', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'name', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'lastname', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'registered', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'lastLogin', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'isActive', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'verificationHash', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'verified', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'roles', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\User' . "\0" . 'toDoList');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setUserId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserId', array($id));

        return parent::setUserId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserId', array());

        return parent::getUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsername($username)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsername', array($username));

        return parent::setUsername($username);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', array());

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword($password)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', array($password));

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', array());

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassRepeat($pass)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassRepeat', array($pass));

        return parent::setPassRepeat($pass);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassRepeat()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassRepeat', array());

        return parent::getPassRepeat();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastname($lastname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastname', array($lastname));

        return parent::setLastname($lastname);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastname', array());

        return parent::getLastname();
    }

    /**
     * {@inheritDoc}
     */
    public function setRegistered(\DateTime $registered)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRegistered', array($registered));

        return parent::setRegistered($registered);
    }

    /**
     * {@inheritDoc}
     */
    public function getRegistered()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegistered', array());

        return parent::getRegistered();
    }

    /**
     * {@inheritDoc}
     */
    public function setVerified($verified)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVerified', array($verified));

        return parent::setVerified($verified);
    }

    /**
     * {@inheritDoc}
     */
    public function getVerified()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVerified', array());

        return parent::getVerified();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastLogin(\DateTime $lastLogin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastLogin', array($lastLogin));

        return parent::setLastLogin($lastLogin);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastLogin($lastLogin)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastLogin', array($lastLogin));

        return parent::getLastLogin($lastLogin);
    }

    /**
     * {@inheritDoc}
     */
    public function setIsActive($isActive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsActive', array($isActive));

        return parent::setIsActive($isActive);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsActive', array());

        return parent::getIsActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setVerificationHash($hash)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVerificationHash', array($hash));

        return parent::setVerificationHash($hash);
    }

    /**
     * {@inheritDoc}
     */
    public function getVerificationHash()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVerificationHash', array());

        return parent::getVerificationHash();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoles(\Locastic\CoreBundle\Entity\Role $role)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoles', array($role));

        return parent::setRoles($role);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', array());

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function isInRole($roleType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isInRole', array($roleType));

        return parent::isInRole($roleType);
    }

    /**
     * {@inheritDoc}
     */
    public function getSalt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSalt', array());

        return parent::getSalt();
    }

    /**
     * {@inheritDoc}
     */
    public function eraseCredentials()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'eraseCredentials', array());

        return parent::eraseCredentials();
    }

    /**
     * {@inheritDoc}
     */
    public function serialize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'serialize', array());

        return parent::serialize();
    }

    /**
     * {@inheritDoc}
     */
    public function unserialize($serialized)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unserialize', array($serialized));

        return parent::unserialize($serialized);
    }

    /**
     * {@inheritDoc}
     */
    public function validatePasswordEquality(\Symfony\Component\Validator\Context\ExecutionContextInterface $context)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'validatePasswordEquality', array($context));

        return parent::validatePasswordEquality($context);
    }

}
