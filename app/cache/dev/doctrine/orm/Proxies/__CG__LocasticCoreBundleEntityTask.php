<?php

namespace Proxies\__CG__\Locastic\CoreBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Task extends \Locastic\CoreBundle\Entity\Task implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\Task' . "\0" . 'taskId', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\Task' . "\0" . 'listId', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\Task' . "\0" . 'taskTitle', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\Task' . "\0" . 'priority', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\Task' . "\0" . 'deadline', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\Task' . "\0" . 'isFinished', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\Task' . "\0" . 'taskCreated', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\Task' . "\0" . 'toDoList');
        }

        return array('__isInitialized__', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\Task' . "\0" . 'taskId', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\Task' . "\0" . 'listId', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\Task' . "\0" . 'taskTitle', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\Task' . "\0" . 'priority', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\Task' . "\0" . 'deadline', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\Task' . "\0" . 'isFinished', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\Task' . "\0" . 'taskCreated', '' . "\0" . 'Locastic\\CoreBundle\\Entity\\Task' . "\0" . 'toDoList');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Task $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setTaskId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaskId', array($id));

        return parent::setTaskId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaskId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getTaskId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaskId', array());

        return parent::getTaskId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaskTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaskTitle', array($title));

        return parent::setTaskTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaskTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaskTitle', array());

        return parent::getTaskTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setPriority($priority, \Closure $dynamicSet = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPriority', array($priority, $dynamicSet));

        return parent::setPriority($priority, $dynamicSet);
    }

    /**
     * {@inheritDoc}
     */
    public function getPriority()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPriority', array());

        return parent::getPriority();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeadline(\DateTime $datetime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeadline', array($datetime));

        return parent::setDeadline($datetime);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeadline()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeadline', array());

        return parent::getDeadline();
    }

    /**
     * {@inheritDoc}
     */
    public function setToDoList(\Locastic\CoreBundle\Entity\ToDoList $list)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setToDoList', array($list));

        return parent::setToDoList($list);
    }

    /**
     * {@inheritDoc}
     */
    public function getToDoList()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getToDoList', array());

        return parent::getToDoList();
    }

    /**
     * {@inheritDoc}
     */
    public function setListId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setListId', array($id));

        return parent::setListId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getListId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getListId', array());

        return parent::getListId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaskCreated(\DateTime $created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaskCreated', array($created));

        return parent::setTaskCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaskCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaskCreated', array());

        return parent::getTaskCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsFinished($finished)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsFinished', array($finished));

        return parent::setIsFinished($finished);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsFinished()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsFinished', array());

        return parent::getIsFinished();
    }

    /**
     * {@inheritDoc}
     */
    public function validate(\Symfony\Component\Validator\Context\ExecutionContextInterface $context)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'validate', array($context));

        return parent::validate($context);
    }

}
